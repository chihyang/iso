had :: (Unit + Unit) <-> (Unit + Unit)
had =
{
  left unit <-> [0.707106781188 * left unit + 0.707106781188 * right unit];
  right unit <-> [0.707106781188 * left unit - 0.707106781188 * right unit]
}

neg :: (Unit + Unit) <-> (Unit + Unit)
neg = { left x <-> right x; right x <-> left x }

allOne ::
  ((Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit)) <->
  (Unit + Unit)
allOne =
{
  x <-> right unit
}

uf ::
  ((Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit)) <->
  ((Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit))
uf =
{
  <y1, y2, y3, y4, y5, y6, y7, y8, y9, y10> <->
  let c = neg y10 in <y1, y2, y3, y4, y5, y6, y7, y8, y9, c>
}

gate ::
  ((Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit)) <->
  ((Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit) × (Unit + Unit))
gate =
{
  <x1, x2, x3, x4, x5, x6, x7, x8, x9, x10> <->
  let a1 = had x1 in
    let a2 = had x2 in
      let a3 = had x3 in
        let a4 = had x4 in
          let a5 = had x5 in
            let a6 = had x6 in
              let a7 = had x7 in
                let a8 = had x8 in
                  let a9 = had x9 in
                    let a10 = had x10 in
                      let <b1, b2, b3, b4, b5, b6, b7, b8, b9, b10> = uf <a1, a2, a3, a4, a5, a6, a7, a8, a9, a10> in
                        let c1 = had b1 in
                          let c2 = had b2 in
                            let c3 = had b3 in
                              let c4 = had b4 in
                                let c5 = had b5 in
                                  let c6 = had b6 in
                                    let c7 = had b7 in
                                      let c8 = had b8 in
                                        let c9 = had b9 in
                                          <c1, c2, c3, c4, c5, c6, c7, c8, c9, b10>
}

(gate <left unit, left unit, left unit, left unit, left unit, left unit, left unit, left unit, left unit, right unit>)
