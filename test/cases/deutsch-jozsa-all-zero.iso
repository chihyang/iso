had :: (Unit + Unit) <-> (Unit + Unit)
had =
{
  left unit <-> [0.707106781188 * left unit + 0.707106781188 * right unit];
  right unit <-> [0.707106781188 * left unit - 0.707106781188 * right unit]
}

neg :: (Unit + Unit) <-> (Unit + Unit)
neg = { left x <-> right x; right x <-> left x }

constantF :: ((Unit + Unit) × (Unit + Unit)) <-> (Unit + Unit)
constantF =
{
  <x, z> <-> left unit
}

uf :: ((Unit + Unit) × (Unit + Unit) × (Unit + Unit)) <-> ((Unit + Unit) × (Unit + Unit) × (Unit + Unit))
uf =
{
  <x, y, z> <-> <x, y, z>
}

gate :: ((Unit + Unit) × (Unit + Unit) × (Unit + Unit)) <-> ((Unit + Unit) × (Unit + Unit) × (Unit + Unit))
gate =
{
  <x, y, z> <-> let a = had x in
                  let b = had y in
                    let c = had z in
                      let <d, e, f> = uf <a, b, c> in
                        let g = had d in
                          let h = had e in
                            <g, h, f>
}

(gate <left unit, left unit, right unit>)
